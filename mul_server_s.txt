#include<stdio.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<string.h>
#include<unistd.h>
#include<stdlib.h>

#define N 100
#define PORT 3453

float compute(char buffer_rec[N])
{
        char op1[10],op2[10],op;

        int flag = 0,l1=0,l2=0;
        float ans;

        for(int i=0;buffer_rec[i] != '\0'; i++){
                if(flag == 0){
                        if((int)buffer_rec[i] >= 48 && (int)buffer_rec[i] <= 57){
                                op1[l1++] = buffer_rec[i];}
                        else{
                                op = buffer_rec[i];
                                flag = 1;
                        }
                }
                else{
                        op2[l2++] =buffer_rec[i];
                }
        }

        int ope1 = atoi(op1);
        int ope2 = atoi(op2);

        switch(op){
                case '+':
                        ans = ope1 + ope2;
                        break;
                case '-':
                        ans = ope1 - ope2;
                        break;
                case '*':
                        ans = ope1 * ope2;
                        break;
                case '/':
                        ans = ope1 / ope2;
                        break;
        }

        return ans;
}

int main()
{
        pid_t childpid;
        int serv_sockfd = socket(AF_INET,SOCK_STREAM,0);
        struct sockaddr_in serv_addr;
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(PORT);
        serv_addr.sin_addr.s_addr = INADDR_ANY;

        if(bind(serv_sockfd,(struct sockaddr*)&serv_addr,sizeof(serv_addr))<0){return 0;}
        if(listen(serv_sockfd,1)<0) {return 0;}

        printf("Server listening on port %d.\n",PORT);

        while(1){
                int client_sockfd = accept(serv_sockfd,NULL,NULL);
                if(client_sockfd < 0)  exit(1);
                char buffer_rec[N];
                char buffer_send[N];

                if((childpid = fork()) == 0){
                        close(serv_sockfd);
                        while(1){
                                recv(client_sockfd,buffer_rec,sizeof(buffer_rec),0);

                                printf("\nServer received :%s\n ",buffer_rec);

                                float res = compute(buffer_rec);
                                printf("\nSent to client %d: %f",childpid,res);
                                sprintf(buffer_send,"%f",res);
                                send(client_sockfd,buffer_send,sizeof(buffer_send),0);
                        }
                }

        }

        close(serv_sockfd);
        return 0;
}